@page "/"
@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@implements IDisposable

    <div style="width: 100%; height: 100%; position: relative;">
        <div id="map" style="width: 100%; height: 100%; max-width: 500px; max-height: 500px; position:absolute; top: 50%; left:50%; transform: translate(-50%, -50%);">
        </div>
    </div>        @*T: @($"{_parsedClientPath.T:0.00000}")
        TimeLeft: @_parsedClientPath.TimeRemaining*@

    @code {
        enum PathStatus { Null, Traversing, LoadingNext, };
        const int TimerTickMs = 16;

        private bool _mapInitialized;
        private PathStatus _pathStatus = PathStatus.Null;
        private bool _isZooming;
        private Pwe.Shared.AgentClientPath _path;
        private Pwe.Shared.ParsedClientPath _parsedClientPath = new Pwe.Shared.ParsedClientPath();
        private System.Threading.Timer _tickTimer;
        private double _pathT;

        public void Dispose()
        {
            _tickTimer.Dispose();
        }

        protected override void OnAfterRender(bool firstRender)
        {
            if (firstRender)
            {
                JsInterop.InitMap(jsRuntime, mapId: "map");
                _mapInitialized = true;
            }
        }

        protected override async Task OnInitializedAsync()
        {
            JsInterop.OnMapZoomBegin = OnMapZoomBegin;
            JsInterop.OnMapZoomEnd = OnMapZoomEnd;

            _tickTimer = new System.Threading.Timer((_) =>
            {
                Tick();
            }, null, TimerTickMs, 0);

            await UpdatePath();
            await Task.CompletedTask;
        }

        private void OnMapZoomBegin()
        {
            _isZooming = true;
        }

        private void OnMapZoomEnd()
        {
            _isZooming = false;
        }

        private void Tick()
        {
            if (_pathStatus == PathStatus.Null || !_mapInitialized || _isZooming)
            {
                _tickTimer.Change(TimerTickMs, 0);
                return;
            }

            long unixMs = Pwe.Shared.GeoMath.UnixMs();
            _parsedClientPath.SetTime(unixMs);
            _pathT = _parsedClientPath.T;
            base.StateHasChanged();

            JsInterop.UpdateMarker(jsRuntime, _parsedClientPath.Position.Lat, _parsedClientPath.Position.Lon);

            if (_parsedClientPath.T >= 1.0)
            {
                _pathStatus = PathStatus.LoadingNext;
                InvokeAsync(() => UpdatePath());
            }

            _tickTimer.Change(TimerTickMs, 0);
        }

        private async Task UpdatePath()
        {
            var jsonPath = await Http.GetStringAsync("https://maps0pwe0sa.blob.core.windows.net/maps/agents/1-clientpath.json?sv=2019-02-02&st=2020-07-14T11%3A06%3A00Z&se=2030-07-15T11%3A06%3A00Z&sr=b&sp=r&sig=rVzcJjXwrpfk6zPnbZ1jeoBmjzjZ7nLyHHmyAGpW2XU%3D");
            _path = System.Text.Json.JsonSerializer.Deserialize<Pwe.Shared.AgentClientPath>(jsonPath);
            _parsedClientPath = Pwe.Shared.ParsedClientPath.Create(_path);
            if (_pathStatus == PathStatus.Null)
            {
                int idxMid = _parsedClientPath.Points.Count / 2;
                JsInterop.SetView(jsRuntime, _parsedClientPath.Points[idxMid].Lat, _parsedClientPath.Points[idxMid].Lon, zoom: 13);
            }
            _pathStatus = PathStatus.Traversing;
        }
    }
